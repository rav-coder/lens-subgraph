type Profile @entity {
  id: ID!
  profileId: BigInt!
  creator: Bytes! # address
}

type Approval @entity {
  id: ID!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
}

type ApprovalForAll @entity {
  id: ID!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
}

type Collect @entity {
  id: ID!
  collector: Bytes! # address
  
  profileId: BigInt!
  "Publication Id"
  pubId: BigInt!

  rootProfileId:  BigInt!
  rootPubId: BigInt!

    "Date of creation"
  timestamp: BigInt!

}

type Stat @entity {
  id: ID!
  "Total profiles"
  totalProfiles: BigInt!
  "Total accounts"
  totalAccounts: BigInt!
  "Total Post"
  totalPosts: BigInt!
  "Total Comments"
  totalComments: BigInt!
  "Total Mirrors"
  totalMirror: BigInt!
  "Total Publicactions"
  totalPublications: BigInt!
  "Last Comment created"
  lastCommentCreatedAt: BigInt
  "Last Post created"
  lastPostCreatedAt: BigInt
  "Last Mirror created"
  lastMirrorCreatedAt: BigInt
  "Last Profile created"
  lastProfileCreated: BigInt
}

interface Publication @entity {
  id: ID!
  "Profile that created the publication"
  fromProfile: Profile!
  "Publication Id"
  pubId: BigInt!
  referenceModule: Bytes!
  referenceModuleReturnData: Bytes
  "Date of creation"
  timestamp: BigInt!
}

type Comment implements Publication @entity {
  id: ID!
  "Profile that created the post"
  fromProfile: Profile!
  "Publication Id"
  pubId: BigInt!
  referenceModule: Bytes!
  referenceModuleReturnData: Bytes
  "URI of the post content"
  contentURI: String!
  profileIdPointed: BigInt!
  pubIdPointed: BigInt!
  collectModule: Bytes
  collectModuleReturnData: Bytes
  "Date of creation"
  timestamp: BigInt!
}

# union CollectModule =
#     FreeCollectModuleSettings
#   | FeeCollectModuleSettings
#   | LimitedFeeCollectModuleSettings
#   | LimitedTimedFeeCollectModuleSettings
#   | RevertCollectModuleSettings
#   | TimedFeeCollectModuleSettings

type FreeCollectModuleSettings  @entity {
  id: ID!
  # The collect modules enum
  type: CollectModules!
  contractAddress: Bytes!

  # Follower only
  followerOnly: Boolean!
}

# The collect module types
enum CollectModules {
  LimitedFeeCollectModule
  FeeCollectModule
  LimitedTimedFeeCollectModule
  TimedFeeCollectModule
  RevertCollectModule
  FreeCollectModule
}

type FeeCollectModuleSettings  @entity {
  id: ID!
  # The collect modules enum
  type: CollectModules!
  contractAddress:  Bytes!

  # The collect module amount info
  amount: BigDecimal!

  # The collect module recipient address
  recipient: Bytes!

  # The collect module referral fee
  referralFee: BigDecimal!

  # Follower only
  followerOnly: Boolean!
}

type LimitedFeeCollectModuleSettings  @entity {
  id: ID!
  # The collect modules enum
  type: CollectModules!
  contractAddress:  Bytes!

  # The collect module limit
  collectLimit: String!

  # The collect module amount info
  amount: BigDecimal!

  # The collect module recipient address
  recipient: Bytes!

  # The collect module referral fee
  referralFee: BigDecimal!

  # Follower only
  followerOnly: Boolean!
}

type LimitedTimedFeeCollectModuleSettings  @entity {
  id: ID!
  # The collect modules enum
  type: CollectModules!
  contractAddress:  Bytes!

  # The collect module limit
  collectLimit: String!

  # The collect module amount info
  amount: BigDecimal!

  # The collect module recipient address
  recipient: Bytes!

  # The collect module referral fee
  referralFee: BigDecimal!

  # Follower only
  followerOnly: Boolean!

  # The collect module end timestamp
  endTimestamp: BigInt!
}

type RevertCollectModuleSettings  @entity {
  id: ID!
  # The collect modules enum
  type: CollectModules!
  contractAddress:  Bytes!
}

type TimedFeeCollectModuleSettings  @entity {
  id: ID!
  # The collect modules enum
  type: CollectModules!
  contractAddress:  Bytes!

  # The collect module amount info
  amount: BigDecimal!

  # The collect module recipient address
  recipient: Bytes!

  # The collect module referral fee
  referralFee: BigDecimal!

  # Follower only
  followerOnly: Boolean!

  # The collect module end timestamp
  endTimestamp: BigInt!
}